{
    "id": "text_begins",
    "summary": "Text begins with another text",
    "description": "Checks whether the text (also known as *string*) specified for `data` contains the text specified for `pattern` at the beginning. No-data values are passed through and therefore get propagated.",
    "categories": [
        "texts",
        "comparison"
    ],
    "parameters": [
        {
            "name": "data",
            "description": "Text in which to find something at the beginning.",
            "schema": {
                "type": [
                    "string",
                    "null"
                ]
            }
        },
        {
            "name": "pattern",
            "description": "Text to find at the beginning of `data`. Regular expressions are not supported.",
            "schema": {
                "type": "string"
            }
        },
        {
            "name": "case_sensitive",
            "description": "Case sensitive comparison can be disabled by setting this parameter to `false`.",
            "schema": {
                "type": "boolean"
            },
            "default": true,
            "optional": true
        }
    ],
    "returns": {
        "description": "`true` if `data` begins with `pattern`, false` otherwise.",
        "schema": {
            "type": [
                "boolean",
                "null"
            ]
        }
    },
    "examples": [
        {
            "arguments": {
                "data": "Lorem ipsum dolor sit amet",
                "pattern": "amet"
            },
            "returns": false
        },
        {
            "arguments": {
                "data": "Lorem ipsum dolor sit amet",
                "pattern": "Lorem"
            },
            "returns": true
        },
        {
            "arguments": {
                "data": "Lorem ipsum dolor sit amet",
                "pattern": "lorem"
            },
            "returns": false
        },
        {
            "arguments": {
                "data": "Lorem ipsum dolor sit amet",
                "pattern": "lorem",
                "case_sensitive": false
            },
            "returns": true
        },
        {
            "arguments": {
                "data": "Ä",
                "pattern": "ä",
                "case_sensitive": false
            },
            "returns": true
        },
        {
            "arguments": {
                "data": null,
                "pattern": "null"
            },
            "returns": null
        }
    ]
}

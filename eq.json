{
    "id": "eq",
    "summary": "Equal to comparison",
    "description": "Compares whether `x` is strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`.\n* Temporal strings are normal strings. To compare temporal strings as dates/times, use ``date_difference()``.",
    "categories": [
        "texts",
        "comparison"
    ],
    "parameters": [
        {
            "name": "x",
            "description": "First operand.",
            "schema": {
                "type": [
                    "number",
                    "boolean",
                    "string",
                    "null"
                ]
            }
        },
        {
            "name": "y",
            "description": "Second operand.",
            "schema": {
                "type": [
                    "number",
                    "boolean",
                    "string",
                    "null"
                ]
            }
        },
        {
            "name": "delta",
            "description": "Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating-point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `lte(abs(minus([x, y]), delta)`",
            "schema": {
                "type": [
                    "number",
                    "null"
                ]
            },
            "default": null,
            "optional": true
        },
        {
            "name": "case_sensitive",
            "description": "Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.",
            "schema": {
                "type": "boolean"
            },
            "default": true,
            "optional": true
        }
    ],
    "returns": {
        "description": "`true` if `x` is equal to `y`, `null` if any operand is `null`, otherwise `false`.",
        "schema": {
            "type": [
                "boolean",
                "null"
            ]
        }
    },
    "examples": [
        {
            "arguments": {
                "x": 1,
                "y": null
            },
            "returns": null
        },
        {
            "arguments": {
                "x": null,
                "y": null
            },
            "returns": null
        },
        {
            "arguments": {
                "x": 1,
                "y": 1
            },
            "returns": true
        },
        {
            "arguments": {
                "x": 1,
                "y": "1"
            },
            "returns": false
        },
        {
            "arguments": {
                "x": 0,
                "y": false
            },
            "returns": false
        },
        {
            "arguments": {
                "x": 1.02,
                "y": 1,
                "delta": 0.01
            },
            "returns": false
        },
        {
            "arguments": {
                "x": -1,
                "y": -1.001,
                "delta": 0.01
            },
            "returns": true
        },
        {
            "arguments": {
                "x": 115,
                "y": 110,
                "delta": 10
            },
            "returns": true
        },
        {
            "arguments": {
                "x": "Test",
                "y": "test"
            },
            "returns": false
        },
        {
            "arguments": {
                "x": "Test",
                "y": "test",
                "case_sensitive": false
            },
            "returns": true
        },
        {
            "arguments": {
                "x": "Ä",
                "y": "ä",
                "case_sensitive": false
            },
            "returns": true
        },
        {
            "arguments": {
                "x": "2018-01-01T00:00:00Z",
                "y": "2018-01-01T00:00:00+00:00"
            },
            "returns": false
        },
        {
            "arguments": {
                "x": null,
                "y": null
            },
            "returns": null
        }
    ]
}

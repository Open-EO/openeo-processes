{
    "id": "load_collection",
    "summary": "Load a collection",
    "description": "Loads a collection from the current back-end by its id and returns it as a processable data cube. The data that is added to the data cube can be restricted with the parameters `spatial_extent`, `temporal_extent`, `bands` and `properties`.\n\n**Remarks:**\n\n* The bands (and all dimensions that specify nominal dimension labels) are expected to be ordered as specified in the metadata if the `bands` parameter is set to `null`.\n* If no additional parameter is specified this would imply that the whole data set is expected to be loaded. Due to the large size of many data sets, this is not recommended and may be optimized by back-ends to only load the data that is actually required after evaluating subsequent processes such as filters. This means that the pixel values should be processed only after the data has been limited to the required extent and as a consequence also to a manageable size.",
    "categories": [
        "cubes",
        "import"
    ],
    "parameters": [
        {
            "name": "id",
            "description": "The collection id.",
            "schema": {
                "type": "string",
                "subtype": "collection-id",
                "pattern": "^[\\w\\-\\.~/]+$"
            }
        },
        {
            "name": "spatial_extent",
            "description": "Limits the data to load from the collection to the specified bounding box or polygons.\n\nThe process puts a pixel into the data cube if the point at the pixel center intersects with the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC).\n\nThe GeoJSON can be one of the following feature types:\n\n* A `Polygon` or `MultiPolygon` geometry,\n* a `Feature` with a `Polygon` or `MultiPolygon` geometry,\n* a `FeatureCollection` containing at least one `Feature` with `Polygon` or `MultiPolygon` geometries, or\n* a `GeometryCollection` containing `Polygon` or `MultiPolygon` geometries. To maximize interoperability, `GeometryCollection` should be avoided in favour of one of the alternatives above.\n\nSet this parameter to `null` to set no limit for the spatial extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_bbox()`` or ``filter_spatial()`` directly after loading unbounded data.",
            "schema": [
                {
                    "title": "Bounding Box",
                    "type": "object",
                    "subtype": "bounding-box",
                    "required": [
                        "west",
                        "south",
                        "east",
                        "north"
                    ],
                    "properties": {
                        "west": {
                            "description": "West (lower left corner, coordinate axis 1).",
                            "type": "number"
                        },
                        "south": {
                            "description": "South (lower left corner, coordinate axis 2).",
                            "type": "number"
                        },
                        "east": {
                            "description": "East (upper right corner, coordinate axis 1).",
                            "type": "number"
                        },
                        "north": {
                            "description": "North (upper right corner, coordinate axis 2).",
                            "type": "number"
                        },
                        "base": {
                            "description": "Base (optional, lower left corner, coordinate axis 3).",
                            "type": [
                                "number",
                                "null"
                            ],
                            "default": null
                        },
                        "height": {
                            "description": "Height (optional, upper right corner, coordinate axis 3).",
                            "type": [
                                "number",
                                "null"
                            ],
                            "default": null
                        },
                        "crs": {
                            "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
                            "anyOf": [
                                {
                                    "title": "EPSG Code",
                                    "type": "integer",
                                    "subtype": "epsg-code",
                                    "minimum": 1000,
                                    "examples": [
                                        3857
                                    ]
                                },
                                {
                                    "title": "WKT2",
                                    "type": "string",
                                    "subtype": "wkt2-definition"
                                },
                                {
                                    "title": "PROJ definition",
                                    "type": "string",
                                    "subtype": "proj-definition",
                                    "deprecated": true
                                }
                            ],
                            "default": 4326
                        }
                    }
                },
                {
                    "title": "GeoJSON",
                    "description": "Limits the data cube to the bounding box of the given geometry. All pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`).",
                    "type": "object",
                    "subtype": "geojson"
                },
                {
                    "title": "No filter",
                    "description": "Don't filter spatially. All data is included in the data cube.",
                    "type": "null"
                }
            ]
        },
        {
            "name": "temporal_extent",
            "description": "Limits the data to load from the collection to the specified left-closed temporal interval. Applies to all temporal dimensions. The interval has to be specified as an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html). Also supports open intervals by setting one of the boundaries to `null`, but never both.\n\nSet this parameter to `null` to set no limit for the temporal extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_temporal()`` directly after loading unbounded data.",
            "schema": [
                {
                    "type": "array",
                    "subtype": "temporal-interval",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time",
                                "subtype": "date-time"
                            },
                            {
                                "type": "string",
                                "format": "date",
                                "subtype": "date"
                            },
                            {
                                "type": "string",
                                "subtype": "year",
                                "minLength": 4,
                                "maxLength": 4,
                                "pattern": "^\\d{4}$"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "examples": [
                        [
                            "2015-01-01T00:00:00Z",
                            "2016-01-01T00:00:00Z"
                        ],
                        [
                            "2015-01-01",
                            "2016-01-01"
                        ]
                    ]
                },
                {
                    "title": "No filter",
                    "description": "Don't filter temporally. All data is included in the data cube.",
                    "type": "null"
                }
            ]
        },
        {
            "name": "bands",
            "description": "Only adds the specified bands into the data cube so that bands that don't match the list of band names are not available. Applies to all dimensions of type `bands`.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.\n\nIt is recommended to use this parameter instead of using ``filter_bands()`` directly after loading unbounded data.",
            "schema": [
                {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "subtype": "band-name"
                    }
                },
                {
                    "title": "No filter",
                    "description": "Don't filter bands. All bands are included in the data cube.",
                    "type": "null"
                }
            ],
            "default": null,
            "optional": true
        },
        {
            "name": "properties",
            "description": "Limits the data by metadata properties to include only data in the data cube which all given conditions return `true` for (AND operation).\n\nSpecify key-value-pairs with the key being the name of the metadata property, which can be retrieved with the openEO Data Discovery for Collections. The value must be a condition (user-defined process) to be evaluated against the collection metadata, see the example.",
            "schema": [
                {
                    "type": "object",
                    "subtype": "metadata-filter",
                    "title": "Filters",
                    "description": "A list of filters to check against. Specify key-value-pairs with the key being the name of the metadata property name and the value being a process evaluated against the metadata values.",
                    "additionalProperties": {
                        "type": "object",
                        "subtype": "process-graph",
                        "parameters": [
                            {
                                "name": "value",
                                "description": "The property value to be checked against.",
                                "schema": {
                                    "description": "Any data type."
                                }
                            }
                        ],
                        "returns": {
                            "description": "`true` if the data should be loaded into the data cube, otherwise `false`.",
                            "schema": {
                                "type": "boolean"
                            }
                        }
                    }
                },
                {
                    "title": "No filter",
                    "description": "Don't filter by metadata properties.",
                    "type": "null"
                }
            ],
            "default": null,
            "optional": true
        }
    ],
    "returns": {
        "description": "A data cube for further processing. The dimensions and dimension properties (name, type, labels, reference system and resolution) correspond to the collection's metadata, but the dimension labels are restricted as specified in the parameters.",
        "schema": {
            "type": "object",
            "subtype": "raster-cube"
        }
    },
    "examples": [
        {
            "description": "Loading `Sentinel-2B` data from a `Sentinel-2` collection for 2018, but only with cloud cover between 0 and 50%.",
            "arguments": {
                "id": "Sentinel-2",
                "spatial_extent": {
                    "west": 16.1,
                    "east": 16.6,
                    "north": 48.6,
                    "south": 47.2
                },
                "temporal_extent": [
                    "2018-01-01",
                    "2019-01-01"
                ],
                "properties": {
                    "eo:cloud_cover": {
                        "process_graph": {
                            "cc": {
                                "process_id": "between",
                                "arguments": {
                                    "x": {
                                        "from_parameter": "value"
                                    },
                                    "min": 0,
                                    "max": 50
                                },
                                "result": true
                            }
                        }
                    },
                    "platform": {
                        "process_graph": {
                            "pf": {
                                "process_id": "eq",
                                "arguments": {
                                    "x": {
                                        "from_parameter": "value"
                                    },
                                    "y": "Sentinel-2B",
                                    "case_sensitive": false
                                },
                                "result": true
                            }
                        }
                    }
                }
            }
        }
    ],
    "links": [
        {
            "href": "https://openeo.org/documentation/1.0/datacubes.html",
            "rel": "about",
            "title": "Data Cubes explained in the openEO documentation"
        },
        {
            "rel": "about",
            "href": "https://proj.org/usage/projections.html",
            "title": "PROJ parameters for cartographic projections"
        },
        {
            "rel": "about",
            "href": "http://www.epsg-registry.org",
            "title": "Official EPSG code registry"
        },
        {
            "rel": "about",
            "href": "http://www.epsg.io",
            "title": "Unofficial EPSG code database"
        },
        {
            "href": "http://www.opengeospatial.org/standards/sfa",
            "rel": "about",
            "title": "Simple Features standard by the OGC"
        },
        {
            "rel": "about",
            "href": "https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names",
            "title": "List of common band names as specified by the STAC specification"
        }
    ]
}
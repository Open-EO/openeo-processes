{
    "id": "regularize_data_cube",
    "summary": "Converts irregular data cubes into consistent datacubes.",
    "description": "Convert irregular data cubes into consistent(in space and time) and complete data cubes, ensuring compatibility with machine learning and deep learning classification algorithms.\n\nThis process eliminates gaps and missing values, enabling the use of machine learning and deep learning algorithms for remote sensing data. A batch job result can be loaded by providing a reference to it.", 
    "categories": [
        "cubes"
    ],
    "experimental": true,
    "parameters": [
        {
            "name": "data",
            "description": "A data cube.",
            "schema": {
                "type": "object",
                "subtype": "datacube"
            }
        },
        {
            "name": "period",
            "description": "The parameter allows you to specify the time interval between images in a data cube. The values for the period parameter follow the `ISO8601` time period specification format. This format represents time intervals as `P[n]Y[n]M[n]D`, where `Y` represents years, `M` represents months, and `D` represents days. For example, if you set the period as `P1M`, it signifies a one-month interval, while `P15D` represents a fifteen-day interval.",
            "schema": {
                "type": "string"
            }
        },
        {
            "name": "resolution",
            "description": "Resamples the data cube to the target resolution, which can be specified either as separate values for x and y or as a single value for both axes. Specified in the units of the target projection. Doesn't change the resolution by default (`0`).",
            "schema": [
                {
                    "description": "A single number used as the resolution for both x and y.",
                    "type": "number",
                    "minimum": 0
                },
                {
                    "description": "A two-element array to specify separate resolutions for x (first element) and y (second element).",
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                        "type": "number",
                        "minimum": 0
                    }
                }
            ],
            "default": 0,
            "optional": true
        },
        {
            "name": "resample-method",
            "description": "Resampling method to use. The following options are available and are meant to align with [`gdalwarp`](https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-r):\n\n* `average`: average (mean) resampling, computes the weighted average of all valid pixels\n* `bilinear`: bilinear resampling\n* `cubic`: cubic resampling\n* `cubicspline`: cubic spline resampling\n* `lanczos`: Lanczos windowed sinc resampling\n* `max`: maximum resampling, selects the maximum value from all valid pixels\n* `med`: median resampling, selects the median value of all valid pixels\n* `min`: minimum resampling, selects the minimum value from all valid pixels\n* `mode`: mode resampling, selects the value which appears most often of all the sampled points\n* `near`: nearest neighbour resampling (default)\n* `q1`: first quartile resampling, selects the first quartile value of all valid pixels\n* `q3`: third quartile resampling, selects the third quartile value of all valid pixels\n* `rms` root mean square (quadratic mean) of all valid pixels\n* `sum`: compute the weighted sum of all valid pixels\n\nValid pixels are determined based on the function ``is_valid()``.",
            "schema": {
                "type": "string",
                "enum": [
                    "average",
                    "bilinear",
                    "cubic",
                    "cubicspline",
                    "lanczos",
                    "max",
                    "med",
                    "min",
                    "mode",
                    "near",
                    "q1",
                    "q3",
                    "rms",
                    "sum"
                ]
            },
            "default": "near",
            "optional": true
        },
        {
            "name": "spatial-extent",
            "description": "A bounding box, which may include a vertical axis (see `base` and `height`).",
            "schema": {
                "type": "object",
                "subtype": "bounding-box",
                "required": [
                    "west",
                    "south",
                    "east",
                    "north"
                ],
                "properties": {
                    "west": {
                        "description": "West (lower left corner, coordinate axis 1).",
                        "type": "number"
                    },
                    "south": {
                        "description": "South (lower left corner, coordinate axis 2).",
                        "type": "number"
                    },
                    "east": {
                        "description": "East (upper right corner, coordinate axis 1).",
                        "type": "number"
                    },
                    "north": {
                        "description": "North (upper right corner, coordinate axis 2).",
                        "type": "number"
                    },
                    "base": {
                        "description": "Base (optional, lower left corner, coordinate axis 3).",
                        "type": [
                            "number",
                            "null"
                        ],
                        "default": null
                    },
                    "height": {
                        "description": "Height (optional, upper right corner, coordinate axis 3).",
                        "type": [
                            "number",
                            "null"
                        ],
                        "default": null
                    },
                    "crs": {
                        "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/) or [WKT2 CRS string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
                        "anyOf": [
                            {
                                "title": "EPSG Code",
                                "type": "integer",
                                "subtype": "epsg-code",
                                "minimum": 1000,
                                "examples": [
                                    3857
                                ]
                            },
                            {
                                "title": "WKT2",
                                "type": "string",
                                "subtype": "wkt2-definition"
                            }
                        ],
                        "default": 4326
                    }
                }
            },
            "default": null,
            "optional": true
        },
        {
            "name": "temporal-extent",
            "description": "Left-closed temporal interval, i.e. an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified time instant is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified time instant is **excluded** from the interval.\n\nThe second element must always be greater/later than the first element. Otherwise, a `TemporalExtentEmpty` exception is thrown.\n\nAlso supports unbounded intervals by setting one of the boundaries to `null`, but never both.",
            "schema": {
                "type": "array",
                "subtype": "temporal-interval",
                "minItems": 2,
                "maxItems": 2,
                "items": {
                    "anyOf": [
                        {
                            "type": "string",
                            "format": "date-time",
                            "subtype": "date-time",
                            "description": "Date and time with a time zone."
                        },
                        {
                            "type": "string",
                            "format": "date",
                            "subtype": "date",
                            "description": "Date only, formatted as `YYYY-MM-DD`. The time zone is UTC. Missing time components are all 0."
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "examples": [
                    [
                        "2022-01-01T00:00:00Z",
                        "2023-01-01T00:00:00Z"
                    ],
                    [
                        "2022-01-01",
                        "2023-01-01"
                    ]
                ]
            },
            "default": null,
            "optional": true
        }
    ],
    "returns": {
        "description": "A regular data cube in space and time.",
        "schema": {
            "type": "object",
            "subtype": "datacube"
        }
    }
}
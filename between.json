{
    "id": "between",
    "summary": "Between comparison",
    "description": "By default, this process checks whether `x` is greater than or equal to `min` and lower than or equal to `max`, which is the same as computing `and(gte(x, min), lte(x, max))`. Therefore, all definitions from ``and()``, ``gte()`` and ``lte()`` apply here as well.\n\nIf `exclude_max` is set to `true` the upper bound is excluded so that the process checks whether `x` is greater than or equal to `min` and lower than `max`. In this case, the process works the same as computing `and(gte(x, min), lt(x, max))`.\n\nLower and upper bounds are not allowed to be swapped. So `min` MUST be lower than or equal to `max` or otherwise the process always returns `false`.",
    "categories": [
        "comparison"
    ],
    "parameters": [
        {
            "name": "x",
            "description": "The value to check.",
            "schema": {
                "description": "Any data type is allowed."
            }
        },
        {
            "name": "min",
            "description": "Lower boundary (inclusive) to check against.",
            "schema": [
                {
                    "type": "number"
                },
                {
                    "type": "string",
                    "format": "date-time",
                    "subtype": "date-time"
                },
                {
                    "type": "string",
                    "format": "date",
                    "subtype": "date"
                },
                {
                    "type": "string",
                    "format": "time",
                    "subtype": "time"
                }
            ]
        },
        {
            "name": "max",
            "description": "Upper boundary (inclusive) to check against.",
            "schema": [
                {
                    "type": "number"
                },
                {
                    "type": "string",
                    "format": "date-time",
                    "subtype": "date-time"
                },
                {
                    "type": "string",
                    "format": "date",
                    "subtype": "date"
                },
                {
                    "type": "string",
                    "format": "time",
                    "subtype": "time"
                }
            ]
        },
        {
            "name": "exclude_max",
            "description": "Exclude the upper boundary `max` if set to `true`. Defaults to `false`.",
            "schema": {
                "type": "boolean"
            },
            "default": false,
            "optional": true
        }
    ],
    "returns": {
        "description": "`true` if `x` is between the specified bounds, otherwise `false`.",
        "schema": {
            "type": [
                "boolean",
                "null"
            ]
        }
    },
    "examples": [
        {
            "arguments": {
                "x": null,
                "min": 0,
                "max": 1
            },
            "returns": null
        },
        {
            "arguments": {
                "x": 1,
                "min": 0,
                "max": 1
            },
            "returns": true
        },
        {
            "arguments": {
                "x": 1,
                "min": 0,
                "max": 1,
                "exclude_max": true
            },
            "returns": false
        },
        {
            "description": "Swapped bounds (min is greater than max) MUST always return `false`.",
            "arguments": {
                "x": 0.5,
                "min": 1,
                "max": 0
            },
            "returns": false
        },
        {
            "arguments": {
                "x": -0.5,
                "min": -1,
                "max": 0
            },
            "returns": true
        },
        {
            "arguments": {
                "x": "00:59:59Z",
                "min": "01:00:00+01:00",
                "max": "01:00:00Z"
            },
            "returns": true
        },
        {
            "arguments": {
                "x": "2018-07-23T17:22:45Z",
                "min": "2018-01-01T00:00:00Z",
                "max": "2018-12-31T23:59:59Z"
            },
            "returns": true
        },
        {
            "arguments": {
                "x": "2000-01-01",
                "min": "2018-01-01",
                "max": "2020-01-01"
            },
            "returns": false
        },
        {
            "arguments": {
                "x": "2018-12-31T17:22:45Z",
                "min": "2018-01-01",
                "max": "2018-12-31"
            },
            "returns": true
        },
        {
            "arguments": {
                "x": "2018-12-31T17:22:45Z",
                "min": "2018-01-01",
                "max": "2018-12-31",
                "exclude_max": true
            },
            "returns": false
        }
    ],
    "process_graph": {
        "gte": {
            "process_id": "gte",
            "arguments": {
                "x": {
                    "from_parameter": "x"
                },
                "y": {
                    "from_parameter": "min"
                }
            }
        },
        "lte": {
            "process_id": "lte",
            "arguments": {
                "x": {
                    "from_parameter": "x"
                },
                "y": {
                    "from_parameter": "max"
                }
            }
        },
        "lt": {
            "process_id": "lt",
            "arguments": {
                "x": {
                    "from_parameter": "x"
                },
                "y": {
                    "from_parameter": "max"
                }
            }
        },
        "if": {
            "process_id": "if",
            "arguments": {
                "value": {
                    "from_parameter": "exclude_max"
                },
                "accept": {
                    "from_node": "lte"
                },
                "reject": {
                    "from_node": "lt"
                }
            }
        },
        "and": {
            "process_id": "and",
            "arguments": {
                "x": {
                    "from_node": "gte"
                },
                "y": {
                    "from_node": "if"
                }
            },
            "result": true
        }
    }
}
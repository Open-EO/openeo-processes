{
    "id": "sen2like",
    "summary": "Run the Sen2like processor ",
    "description": "The Sen2like processor generates Sentinel-2-like harmonised or fused surface reflectances with higher periodicity by integrating additional compatible optical mission sensors. The source code is available at https://github.com/senbox-org/sen2like.",
    "categories": [
        "cubes"
    ],
    "experimental": true,
    "parameters": [
        {
            "name": "data",
            "optional": true,
            "description": "The datacube for which to generate L2F & L2H level data.",
            "schema": {
                "type": "object",
                "subtype": "raster-cube"
            }
        },
        {
            "name": "spatial_extent",
            "optional": true,
            "description": "Limits the data to load from the collection to the specified bounding box or polygons.\n\nThe process puts a pixel into the data cube if the point at the pixel center intersects with the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC).\n\nThe GeoJSON can be one of the following feature types:\n\n* A `Polygon` or `MultiPolygon` geometry,\n* a `Feature` with a `Polygon` or `MultiPolygon` geometry,\n* a `FeatureCollection` containing at least one `Feature` with `Polygon` or `MultiPolygon` geometries, or\n* a `GeometryCollection` containing `Polygon` or `MultiPolygon` geometries. To maximize interoperability, `GeometryCollection` should be avoided in favour of one of the alternatives above.\n\nSet this parameter to `null` to set no limit for the spatial extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_bbox()`` or ``filter_spatial()`` directly after loading unbounded data.",
            "schema": [
                {
                    "title": "Bounding Box",
                    "type": "object",
                    "subtype": "bounding-box",
                    "required": [
                        "west",
                        "south",
                        "east",
                        "north"
                    ],
                    "properties": {
                        "west": {
                            "description": "West (lower left corner, coordinate axis 1).",
                            "type": "number"
                        },
                        "south": {
                            "description": "South (lower left corner, coordinate axis 2).",
                            "type": "number"
                        },
                        "east": {
                            "description": "East (upper right corner, coordinate axis 1).",
                            "type": "number"
                        },
                        "north": {
                            "description": "North (upper right corner, coordinate axis 2).",
                            "type": "number"
                        },
                        "base": {
                            "description": "Base (optional, lower left corner, coordinate axis 3).",
                            "type": [
                                "number",
                                "null"
                            ],
                            "default": null
                        },
                        "height": {
                            "description": "Height (optional, upper right corner, coordinate axis 3).",
                            "type": [
                                "number",
                                "null"
                            ],
                            "default": null
                        },
                        "crs": {
                            "description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
                            "anyOf": [
                                {
                                    "title": "EPSG Code",
                                    "type": "integer",
                                    "subtype": "epsg-code",
                                    "minimum": 1000,
                                    "examples": [
                                        3857
                                    ]
                                },
                                {
                                    "title": "WKT2",
                                    "type": "string",
                                    "subtype": "wkt2-definition"
                                },
                                {
                                    "title": "PROJ definition",
                                    "type": "string",
                                    "subtype": "proj-definition",
                                    "deprecated": true
                                }
                            ],
                            "default": 4326
                        }
                    }
                }
            ]
        },
        {
            "name": "temporal_extent",
            "optional": true,
            "description": "Limits the data to load from the collection to the specified left-closed temporal interval. Applies to all temporal dimensions. The interval has to be specified as an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified instance in time is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified instance in time is **excluded** from the interval.\n\nThe specified temporal strings follow [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html). Also supports open intervals by setting one of the boundaries to `null`, but never both.\n\nSet this parameter to `null` to set no limit for the temporal extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_temporal()`` directly after loading unbounded data.",
            "schema": [
                {
                    "type": "array",
                    "subtype": "temporal-interval",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time",
                                "subtype": "date-time"
                            },
                            {
                                "type": "string",
                                "format": "date",
                                "subtype": "date"
                            },
                            {
                                "type": "string",
                                "subtype": "year",
                                "minLength": 4,
                                "maxLength": 4,
                                "pattern": "^\\d{4}$"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "examples": [
                        [
                            "2015-01-01T00:00:00Z",
                            "2016-01-01T00:00:00Z"
                        ],
                        [
                            "2015-01-01",
                            "2016-01-01"
                        ]
                    ]
                }
            ]
        },
        {
            "description": "Per default the target_product is set to 'L2F' to generate the fused sen2like product. Set to 'L2H' to generate the harmonised product.",
            "name": "target_product",
            "optional": true,
            "default": "L2F",
            "schema": {
                "type": "string"
            }
        },
        {
            "name": "bands",
            "description": "Only adds the specified bands into the data cube so that bands that don't match the list of band names are not available. Applies to all dimensions of type `bands`.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.\n\nIt is recommended to use this parameter instead of using ``filter_bands()`` directly after loading unbounded data.",
            "schema": [
                {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string",
                        "subtype": "band-name"
                    }
                },
                {
                    "title": "No filter",
                    "description": "Don't filter bands. All bands are included in the data cube.",
                    "type": "null"
                }
            ],
            "default": null,
            "optional": true
        },
        {
            "description": "Sen2like produces outputs following the Sentinel 2 .SAFE convention. To enable the download for these, set this to True. ",
            "name": "export_original_files",
            "optional": true,
            "default": false,
            "schema": {
                "type": "boolean"
            }
        },
        {
            "description": "The Cloud coverage parameter (percentage) to filter MGRS image tile contaminates with strong cloud coverage. ",
            "name": "cloud_cover",
            "optional": true,
            "default": 50,
            "schema": {
                "type": [
                    "number",
                    "null"
                ]
            }
        }
    ],
    "returns": {
        "description": "Sen2like enriched data cube for further processing. The dimensions and dimension properties (name, type, labels, reference system and resolution) correspond to the collection's metadata, but the dimension labels are restricted as specified in the parameters.",
        "schema": {
            "type": "object",
            "subtype": "datacube"
        }
    },
    
    "links": [
        {
            "href": "https://openeo.org/documentation/1.0/datacubes.html",
            "rel": "about",
            "title": "Data Cubes explained in the openEO documentation"
        },
        {
            "rel": "about",
            "href": "https://github.com/senbox-org/sen2like",
            "title": "Source code for the sen2like processor"
        }
    ]
}
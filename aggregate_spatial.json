{
    "id": "aggregate_spatial",
    "summary": "Compute zonal statistics for a vector data cube",
    "description": "Aggregates zonal statistics for features within a vector data cube (e.g., one or multiple points or polygons) over the spatial dimensions.\n\nIn case of polygon features, the process considers all pixels for which the point at the pixel center intersects with the corresponding polygon (as defined in the Simple Features standard by the OGC).\n\nThe data cube must have been reduced to only contain two raster dimensions and a third dimension the values are aggregated for, for example the temporal dimension to get a time series. Otherwise this process fails with the `TooManyDimensions` error.\n\nThe number of total and valid pixels is returned together with the calculated values.",
    "categories": [
        "cubes",
        "aggregate & resample"
    ],
    "experimental": true,
    "parameter_order": [
        "data",
        "polygons",
        "reducer",
        "name",
        "binary"
    ],
    "parameters": {
        "data": {
            "description": "A raster data cube.",
            "schema": {
                "type": "object",
                "subtype": "raster-cube"
            },
            "required": true
        },
        "vector": {
            "description": "A vector data cube containing features on which the aggregation will be based.",
            "schema": [
                {
                    "type": "object",
                    "subtype": "geojson"
                },
                {
                    "type": "object",
                    "subtype": "vector-cube"
                }
            ],
            "required": true
        },
        "reducer": {
            "description": "A reducer to be applied on all values of each geometry. The reducer must be a callable process (or a set of processes as process graph) such as ``mean()`` that accepts by default array as input. The process can also work on two values by setting the parameter `binary` to `true`.",
            "schema": [
                {
                    "title": "Unary behaviour",
                    "description": "Passes an array to the reducer.",
                    "type": "object",
                    "subtype": "process-graph",
                    "parameters": {
                        "data": {
                            "description": "An array with elements of any data type.",
                            "type": "array",
                            "items": {
                                "description": "Any data type."
                            }
                        }
                    }
                },
                {
                    "title": "Binary behaviour",
                    "description": "Passes two values to the reducer.",
                    "type": "object",
                    "subtype": "process-graph",
                    "parameters": {
                        "x": {
                            "description": "The first value. Any data type could be passed."
                        },
                        "y": {
                            "description": "The second value. Any data type could be passed."
                        }
                    }
                }
            ],
            "required": true
        },
        "name": {
            "description": "The property name (for GeoJSON) or the new dimension name (for vector cubes) to be used for storing the results. Defaults to `result`.",
            "schema": {
                "type": "string"
            },
            "default": "result"
        },
        "binary": {
            "description": "Specifies whether the process should pass two values to the reducer or a list of values (default).\n\nIf the process passes two values, the reducer must be both associative and commutative as the execution may be executed in parallel and therefore the order of execution is arbitrary.\n\nThis parameter is especially useful for UDFs passed as reducers. Back-ends may still optimize and parallelize processes that work on list of values.",
            "schema": {
                "type": "boolean"
            },
            "default": false
        }
    },
    "returns": {
        "description": "A vector data cube or a GeoJSON object, depending on the input of the `vector` parameter.\n\nThe computed value is stored in a property (GeoJSON) or dimension (vector cube) with the name that was specified in the parameter `name`.\n\nThe computation also stores information about the total count of pixels (valid + invalid pixels) and the number of valid pixels (see ``is_valid()``) in each geometry. In GeoJSON these are stored as properties with the names `{name}_total_count` and `{name}_valid_count` (replace `{name}` with the value of the `name` parameter). In a vector data cube, these values are stored as attributes of the result value with the attribute names `total_count` and `valid_count`.\n\nIf the input was GeoJSON and the therefore the return value is also a GeoJSON object, the geometries (`Polygon` or `GeometryCollection`) get wrapped in a `Feature` or `FeatureCollection` respectively. The results of the computations are stored in the `properties` of each GeoJSON `Feature`.",
        "schema": [
            {
                "type": "object",
                "subtype": "geojson"
            },
            {
                "type": "object",
                "subtype": "vector-cube"
            }
        ]
    },
    "exceptions": {
        "TooManyDimensions": {
            "message": "The number of dimensions must be reduced to three for 'aggregate_spatial'."
        }
    },
    "links": [
        {
            "href": "https://github.com/Open-EO/openeo-processes/issues/2",
            "rel": "experimental",
            "title": "More information about the experimental status of the process"
        },
        {
            "href": "https://open-eo.github.io/openeo-api/glossary/#aggregation-and-resampling",
            "rel": "about",
            "title": "Aggregation explained in the openEO glossary"
        },
        {
            "href": "http://www.opengeospatial.org/standards/sfa",
            "rel": "about",
            "title": "Simple Features standard by the OGC"
        },
        {
            "rel": "about",
            "href": "https://en.wikipedia.org/wiki/Reduction_Operator",
            "title": "Background information on reduction operators (binary reducers) by Wikipedia"
        }
    ]
}
